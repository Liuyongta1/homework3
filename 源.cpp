#include<iostream>
#include<string>
#include<Windows.h>
using namespace std;
struct person
{
	person* f = NULL, * m = NULL, * s = NULL, * d = NULL;
	string name;
};//结构体定义
person* myself;
int sex;
person* p;
string s;
void Createmyself()
{
	myself = new person;
	myself->name = "我";
}//根结点的初始化
string all[9][16] = {
"我","","","","","","","","","","","","","","","",
"父亲","母亲","","","","","","","","","","","","","","",
"爷爷","奶奶","外公","外婆","","","","","","","","","","","","",
"曾祖父","曾祖母","曾外祖父","曾外祖母","外曾祖父","外曾祖母","外曾外祖父","外曾外祖母","","","","","","","","",
"高祖父","高祖母","高外祖父","高外祖母","曾外曾祖父","曾外曾祖母","曾外曾外祖父","曾外曾外祖母","外高祖父","外高祖母","外高外祖父","外高外祖母","外曾外曾祖父","外曾外曾祖母","外曾外曾外祖父","外曾外曾外祖母",
"儿子","女儿","","","","","","","","","","","","","","",
"孙子","孙女","外孙","外孙女","","","","","","","","","","","","",
"曾孙","曾孙女","曾外孙","曾外孙女","外曾孙","外曾孙女","外曾外孙","外曾外孙女","","","","","","","","",
"玄孙","玄孙女","玄外孙","玄外孙女","曾外曾孙","曾外曾孙女","曾外曾外孙","曾外曾外孙女","外玄孙","外玄孙女","外玄外孙","外玄外孙女","外曾外曾孙","外曾外曾孙女","外曾外曾外孙","外曾外曾外孙女"
};//用于存储正式称呼，便于后续操作。
string all1[9][16] = {
"","","","","","","","","","","","","","","","",
"0","1","","","","","","","","","","","","","","",
"00","01","10","11","","","","","","","","","","","","",
"000","001","010","011","100","101","110","111","","","","","","","","",
"0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010","1011","1100","1101","1110","1111",
"0","1","","","","","","","","","","","","","","",
"00","01","10","11","","","","","","","","","","","","",
"000","001","010","011","100","101","110","111","","","","","","","","",
"0000","0001","0010","0011","0100","0101","0110","0111","1000","1001","1010","1011","1100","1101","1110","1111"
};//与上面称呼对应，其中0代表指向父亲或儿子，1代表指向母亲或女儿。
void create()
{
	Createmyself();
	p = myself;//用于操作的指针p，首先指向根结点。
	//下面的循环用于遍历all1数组，用来创建二叉树
	for (int i = 0; i < 9; i++)
	{
		for (int j = 0; j < pow(2, all1[i][0].length()); j++)//每行的有效元素的个数为其字符串长度的平方，故如此循环。
		{
			if (i > 0 && i < 5)//当处于all1的1-4行时，0代表父亲，1代表母亲。
			{
				for (int z = 0; z < all1[i][0].length(); z++)//用以依次读取all1中的每个元素，进行指针操作。
				{
					if (all1[i][j][z] == '0')//父或子
					{
						if (p->f != NULL)//当其所指空间不为空时，说明已经创建过，则p直接指向它所对应的空间
						{
							p = p->f;
						}
						else//若不为空，则开辟空间并进行赋值
						{
							p->f = new person;
							p->f->name = all[i][j];
							if (z > 0)//此判断语句用以将指针指回其前驱结点，判断前驱性别后指到对应域，z大于0时不必考虑自身性别，根据前一操作判断前驱性别
							{
								if (all1[i][j][z - 1] == '0')
									p->f->s = p;
								else
									p->f->d = p;
							}
							else//z等于0时根据自身性别指回
							{
								if (sex == 1)
									p->f->s = p;
								else
									p->f->d = p;
							}
						}
					}
					else//母或女
					{
						if (p->m != NULL)
						{
							p = p->m;
						}
						else
						{
							p->m = new person;
							p->m->name = all[i][j];
							if (z > 0)
							{
								if (all1[i][j][z - 1] == '0')
									p->m->s = p;
								else
									p->m->d = p;
							}
							else
							{
								if (sex == 1)
									p->m->s = p;
								else
									p->m->d = p;
							}
						}
					}
				}
				p = myself;//将p指针重新指回根结点，便于后续操作
			}
			else if ((i >= 5 && i < 9))//当处于all1的后4行时，0代表儿子，1代表女儿
			{
				for (int z = 0; z < all1[i][0].length(); z++)
				{
					if (all1[i][j][z] == '0')
					{
						if (p->s != NULL)
						{
							p = p->s;
						}
						else
						{
							p->s = new person;
							p->s->name = all[i][j];
							if (z > 0)
							{
								if (all1[i][j][z - 1] == '0')
									p->s->f = p;
								else
									p->s->m = p;
							}
							else
							{
								if (sex == 1)
									p->s->f = p;
								else
									p->s->m = p;
							}
						}
					}
					else
					{
						if (p->d != NULL)
						{
							p = p->d;
						}
						else
						{
							p->d = new person;
							p->d->name = all[i][j];
							if (z > 0)
							{
								if (all1[i][j][z - 1] == '0')
									p->d->f = p;
								else
									p->d->m = p;
							}
							else
							{
								if (sex == 1)
									p->d->f = p;
								else
									p->d->m = p;
							}
						}
					}
				}
				p = myself;
			}
		}
	}
}
void read(string s);//ciin函数于read函数嵌套，提前声明
void ciin()//引导输入
{
	cout << "请依次输入一串数字，其中1：父亲 2：母亲 3：儿子 4：女儿" << endl;
	cin >> s;
	read(s);
}
void read(string s)//进行输出
{
	p = myself;
	for (int i = 0; i < s.length(); i++)//根据输入s的长度决定操作执行的次数
	{
		if (s[i] == '1')
		{
			p = p->f;
			if (p == NULL)
			{
				cout << "本计算机仅计算九代以内直系亲属，请重新输入" << endl;
				ciin();
				break;
			}
		}
		else if (s[i] == '2')
		{
			p = p->m;
			if (p == NULL)
			{
				cout << "本计算机仅计算九代以内直系亲属，请重新输入" << endl;
				ciin();
				break;
			}
		}
		else if (s[i] == '3')
		{
			p = p->s;
			if (p == NULL)
			{
				cout << "本计算机仅计算九代以内直系亲属，请重新输入" << endl;
				ciin();
				break;
			}
		}
		else if (s[i] == '4')
		{
			p = p->d;
			if (p == NULL)
			{
				cout << "本计算机仅计算九代以内直系亲属，请重新输入" << endl;
				ciin();
				break;
			}
		}
		else
		{
			cout << "本计算机仅计算九代以内直系亲属，请重新输入" << endl;
			ciin();
			break;
		}
	}
	cout << "您对他的称呼为：" << endl;
	cout << p->name << endl;
	system("cls");
	cout << "                  欢迎使用亲戚关系计算器" << endl;
	cout << "您对他的称呼为：" << endl;
	cout << p->name << endl;
	system("pause");
}
void show()
{
	cout << all[4][0] << " " << all[4][1] << " " << all[4][2] << " " << all[4][3] << " " << all[4][4] << " " << all[4][5] << "  " << all[4][6] << " " << all[4][7] << " " << all[4][8] << " " << all[4][9] << " " << all[4][10] << " " << all[4][11] << " " << all[4][12] << " " << all[4][13] << " " << all[4][14] << " " << all[4][15] << endl;
	cout << "      V               V                   V                        V                     V                   V                       V                           V" << endl;
	cout << "    " << all[3][0] << "          " << all[3][1] << "             " << all[3][2] << "                 " << all[3][3] << "              " << all[3][4] << "            " << all[3][5] << "                " << all[3][6] << "                 " << all[3][7] << endl;
	cout << "              V                                        V                                           V                                                V              " << endl;
	cout << "            " << all[2][0] << "                                     " << all[2][1] << "                                        " << all[2][2] << "                                             " << all[2][3] << endl;
	cout << "                                  V                                                                                         V                                      " << endl;
	cout << "                                " << all[1][0] << "                                                                                      " << all[1][1] << endl;
	cout << "                                                                              V                                                                                    " << endl;
	cout << "                                                                              " << all[0][0] << endl;
	cout << "                                                                              Λ                                                                                    " << endl;
	cout << "                                " << all[5][0] << "                                                                                      " << all[5][1] << endl;
	cout << "                                 Λ                                                                                        Λ                                      " << endl;
	cout << "            " << all[6][0] << "                                     " << all[6][1] << "                                        " << all[6][2] << "                                             " << all[6][3] << endl;
	cout << "             Λ                                       Λ                                          Λ                                                Λ              " << endl;
	cout << "    " << all[7][0] << "          " << all[7][1] << "                 " << all[7][2] << "                 " << all[7][3] << "               " << all[7][4] << "            " << all[7][5] << "                   " << all[7][6] << "                 " << all[7][7] << endl;
	cout << "     Λ             Λ                     Λ                      Λ                    Λ                 Λ                         Λ                         Λ" << endl;
	cout << " " << all[8][0] << " " << all[8][1] << "  " << all[8][2] << " " << all[8][3] << "      " << all[8][4] << " " << all[8][5] << "    " << all[8][6] << " " << all[8][7] << "  " << all[8][8] << " " << all[8][9] << "   " << all[8][10] << " " << all[8][11] << "     " << all[8][12] << " " << all[8][13] << "   " << all[8][14] << " " << all[8][15] << endl;
	system("pause");
	system("cls");
}
int main()
{
	int select;
	while (1)
	{
		system("cls");
		cout << "                  欢迎使用亲戚关系计算器" << endl;
		cout << "请输入您想实现的功能：1:进行亲戚关系的计算 2:查看直系家谱树信息 0:退出计算器" << endl;
		cin >> select;
		if (select == 1)
		{
			cout << "请输入自己的性别：" << endl << "1:男 2:女" << endl;
			cin >> sex;
			while (sex != 1 && sex != 2)
			{
				cout << "输入错误，请重新输入自己的性别：" << endl;
				cout << "请输入自己的性别：" << endl << "1:男 2:女" << endl;
				cin >> sex;
				system("cls");
				cout << "                  欢迎使用亲戚关系计算器" << endl;
			}
			system("cls");
			cout << "                  欢迎使用亲戚关系计算器" << endl;
			create();
			ciin();
		}
		else if (select == 2)
			show();
		else
			break;
	}
	system("pause");
	return 0;
}